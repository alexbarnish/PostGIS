-- PGRouting_create_intersections.sql
-- Greg Allensworth @ GreenInfo Network, with help from Stephen Woodbridge an Daniel Kastl
-- no license, public domain
-- 
-- A function for use with pgrouting.
-- Look over a source table of linestring geometries, and find intersections.
-- Populate a new table with the  inestring geometries split up at intersections.
-- The resulting linestrings will actually start and end at those intersections,
-- making them amenable to further analysis in pgrouting, e.g. calling assign_vertex_id()
-- 
-- Parameters:
-- source table name; this is the table to be analyzed
-- target table name; this table will be created and populated with the split-up segments
-- geom field; the name of the geometry column
-- bridge clause; a clause to be used as a WHERE clause, indicating segments which should NOT be split
-- 
-- The geom field is optional, and defaults to 'geom'
-- The bridge clause is optional, and defaults to 'FALSE' meaning that no linestrings will be exempt from splitting
-- In the bridge clause, prepend 'a.' to field names to disambiguate them, per the example below.
-- 
-- Usage:
-- SELECT pgr_create_intersections('raw_trails','routing_trails','geom',E'a.bridge=''yes''');


CREATE OR REPLACE FUNCTION pgr_create_intersections(varchar,varchar,varchar='geom',varchar='FALSE')
RETURNS text AS $$
DECLARE
    old_table ALIAS FOR $1;
    new_table ALIAS FOR $2;
    geomfield ALIAS FOR $3;
    bridgeclause ALIAS FOR $4;
    thissegment record;
BEGIN

    -- create the target table with the same fields as the source table
    BEGIN
        RAISE NOTICE 'Loading from % into %', old_table, new_table;
        EXECUTE 'CREATE TABLE ' || new_table || ' AS SELECT * FROM ' || old_table || ' WHERE false';
        EXECUTE 'DROP TABLE ' || new_table;
    EXCEPTION
        WHEN duplicate_table THEN
            RETURN 'CANCEL: Target table already exists';
    END;

    -- create the target table, containing the split-up geometries as split_geom
    -- but still containing the original geom field (whatever its name was)
    -- do this only for those NOT matching the bridgeclause
    RAISE NOTICE 'Splitting non-bridge segments';
    EXECUTE 'CREATE TABLE ' || new_table || ' AS SELECT a.*, (ST_Dump(ST_Split(a.' || geomfield || ',b.' || geomfield || '))).geom AS split_geom FROM ' || old_table || ' a, ' || old_table || ' b WHERE a.id != b.id AND NOT (' || bridgeclause || ')';

    -- records which DO match the bridgeclause, are inserted as-is, no splitting
    RAISE NOTICE 'Copying bridge segments as-is';
    EXECUTE 'INSERT INTO ' || new_table || ' SELECT * FROM ' || old_table || ' a WHERE ' || bridgeclause;

    -- drop and rename the original geometry column so the split one is the right one
    RAISE NOTICE 'Renaming geometry column %', geomfield;
    EXECUTE 'ALTER TABLE ' || new_table || ' DROP COLUMN ' || geomfield;
    EXECUTE 'ALTER TABLE ' || new_table || ' RENAME COLUMN split_geom TO ' || geomfield;

    -- if this is PostGIS 1.x then we have a geometry field but no geometry_columns entry
    -- future work: figure out the fields to make an entry into geometry_columns
    -- if it turns out that folks are using PostGIS 1.x for new development after all...

    -- Done!
    RETURN 'OK';
END;
$$ LANGUAGE plpgsql;
