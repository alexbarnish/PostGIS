-- PGRouting_create_intersections.sql
-- Greg Allensworth @ GreenInfo Network, with help from Stephen Woodbridge an Daniel Kastl
-- no license, public domain
-- 
-- A function for use with pgrouting.
-- Look over a source table of linestring geometries, and find intersections.
-- Populate a new table with the linestring geometries split up at intersections.
-- The resulting linestrings will actually start and end at those intersections,
-- making them amenable to further analysis in pgrouting, e.g. calling assign_vertex_id()
-- 
-- Parameters:
-- source table name; this is the table to be analyzed
-- target table name; this table will be created and populated with the split-up segments
-- geom field; the name of the geometry column
-- attributes list; a comma-joined list of simple attributes to be copied to the target table
-- bridge clause; a clause to be used as a WHERE clause, indicating segments which should NOT be split
-- 
-- The bridge clause is optional, and defaults to 'FALSE' meaning that no linestrings will be exempt from splitting
-- 
-- The geometry field in the target table, will be called the_geom to match expectations within pgrouting.
-- 
-- The attributes list is not used at this time, as PL/PGSQL has no method of iterating over record fields,
-- nor for accessing fields from a record even if you know the name. Maybe some day...
-- 
-- Usage:
-- SELECT pgr_create_intersections('raw_trails','routing_trails','geom','name,speedlimit',E'bridge=''yes''');


CREATE OR REPLACE FUNCTION pgr_create_intersections(varchar,varchar,varchar,varchar,varchar='FALSE')
RETURNS text AS $$
DECLARE
    old_table ALIAS FOR $1;
    new_table ALIAS FOR $2;
    geomfield ALIAS FOR $3;
    attributes ALIAS FOR $4;
    bridgeclause ALIAS FOR $5;
    targetrow record;
    sourcerow record;
    attriblist varchar[];
    attrib varchar;
    value  record;
BEGIN

    -- create the target table with the same fields as the source table
    BEGIN
        RAISE NOTICE 'Loading from % into %', old_table, new_table;
        EXECUTE 'CREATE TABLE ' || new_table || ' AS SELECT * FROM ' || old_table || ' WHERE false';
        EXECUTE 'DROP TABLE ' || new_table;
    EXCEPTION
        WHEN duplicate_table THEN
            RETURN 'CANCEL: Target table already exists';
    END;

    -- create the blank table, but with the stated attribute fields
    EXECUTE 'CREATE TABLE ' || new_table || ' AS SELECT ' || attributes || ',' || geomfield || ' AS the_geom ' || ' FROM ' || old_table || ' WHERE false';

    -- yay for st_node()
    -- Take the union of all linestrings in the source table, node it, and save the raw segments to the target table
    -- Then load the bridge segments as-is without noding
    -- Note that this names the target geometry column the_geom to match conventions used within pgrouting
    RAISE NOTICE 'Noding and inserting non-bridge linestrings';
    EXECUTE 'INSERT INTO ' || new_table || ' (the_geom) SELECT '
            || '(ST_DUMP(ST_NODE(ST_UNION(' || geomfield || ')))).geom AS the_geom FROM ' || old_table
            || ' WHERE NOT ' || bridgeclause;
    EXECUTE 'SELECT COUNT(*) AS howmany FROM ' || new_table INTO targetrow;
    RAISE NOTICE '    % segments after noding', targetrow.howmany;

    RAISE NOTICE 'Inserting bridge linestrings as-is';
    EXECUTE 'INSERT INTO ' || new_table || ' (the_geom) SELECT ' || geomfield || ' FROM ' || old_table || ' WHERE ' || bridgeclause;
    EXECUTE 'SELECT COUNT(*) AS howmany FROM ' || new_table INTO targetrow;
    RAISE NOTICE '    % segments after adding bridges', targetrow.howmany;

    -- Done!
    RETURN 'OK';
END;
$$ LANGUAGE plpgsql;
